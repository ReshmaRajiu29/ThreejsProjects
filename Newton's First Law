<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Newton's First Law Demo with Goal</title>
  <style>
    body { margin: 0; overflow: hidden; font-family: Arial; }
    #info {
      position: absolute;
      top: 10px;
      left: 10px;
      color: white;
      background: rgba(0,0,0,0.5);
      padding: 10px;
      border-radius: 5px;
      display: none; /* hidden until game starts */
    }
    #message, #startMessage {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.85);
      color: white;
      padding: 20px;
      border-radius: 10px;
      font-size: 18px;
      width: 60%;
      text-align: center;
    }
    #message { display: none; }
    button {
      margin-top: 15px;
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      background: #007bff;
      color: white;
    }
    button:hover {
      background: #0056b3;
    }
  </style>
</head>
<body>
<div id="info">Velocity: 0</div>
<div id="message"></div>
<div id="startMessage">
  <h2>Welcome to Newton's First Law Demo âš½</h2>
  <p>Use the <b>Arrow Keys</b> to push the red ball.</p>
  <p>Your goal is to reach the <b>blue cube</b> while avoiding green obstacles.</p>
  <p>Along the way, notice how inertia, friction, and collisions affect the ballâ€™s motion.</p>
  <button id="startBtn">OK, Let's Play!</button>
</div>

<script type="module">
  import * as THREE from "https://cdn.jsdelivr.net/npm/three@0.150.1/build/three.module.js";

  let scene, camera, renderer, ball, goal, keys = {};
  let velocityX = 0, velocityZ = 0;
  const friction = 0.05;
  const pushForce = 0.005;
  let gameOver = false;
  let gameStarted = false;

  init();

  document.getElementById("startBtn").addEventListener("click", () => {
    document.getElementById("startMessage").style.display = "none";
    document.getElementById("info").style.display = "block";
    gameStarted = true;
    animate();
  });

  function init() {
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x202020);

    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 5, 10);
    camera.lookAt(0, 0, 0);

    renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(5, 10, 5);
    scene.add(light);

    // Ground
    const ground = new THREE.Mesh(
      new THREE.PlaneGeometry(20, 20),
      new THREE.MeshStandardMaterial({ color: 0x444444 })
    );
    ground.rotation.x = -Math.PI / 2;
    scene.add(ground);

    // Ball
    const geometry = new THREE.SphereGeometry(0.5, 32, 32);
    const material = new THREE.MeshStandardMaterial({ color: 0xff0000 });
    ball = new THREE.Mesh(geometry, material);
    ball.position.y = 0.5;
    scene.add(ball);

    // Obstacles
    for (let i = 0; i < 5; i++) {
      const box = new THREE.Mesh(
        new THREE.BoxGeometry(1, 1, 1),
        new THREE.MeshStandardMaterial({ color: 0x00ff00 })
      );
      box.position.set((Math.random() - 0.5) * 15, 0.5, (Math.random() - 0.5) * 15);
      scene.add(box);
    }

    // Goal area
    goal = new THREE.Mesh(
      new THREE.BoxGeometry(1.5, 1, 1.5),
      new THREE.MeshStandardMaterial({ color: 0x0000ff })
    );
    goal.position.set(6, 0.5, 6);
    scene.add(goal);

    document.addEventListener("keydown", (e) => (keys[e.key] = true));
    document.addEventListener("keyup", (e) => (keys[e.key] = false));

    window.addEventListener("resize", onWindowResize);
  }

  function handleInput() {
    if (keys["ArrowUp"]) velocityZ -= pushForce;
    if (keys["ArrowDown"]) velocityZ += pushForce;
    if (keys["ArrowLeft"]) velocityX -= pushForce;
    if (keys["ArrowRight"]) velocityX += pushForce;
  }

  function applyFriction() {
    velocityX *= 1 - friction;
    velocityZ *= 1 - friction;
    if (Math.abs(velocityX) < 0.001) velocityX = 0;
    if (Math.abs(velocityZ) < 0.001) velocityZ = 0;
  }

  function checkCollisions() {
    const ballBox = new THREE.Box3().setFromObject(ball);
    scene.children.forEach(obj => {
      if (obj.geometry && obj.geometry.type === "BoxGeometry" && obj !== goal) {
        const box = new THREE.Box3().setFromObject(obj);
        if (ballBox.intersectsBox(box)) {
          velocityX *= -0.7;
          velocityZ *= -0.7;
        }
      }
    });

    // Check goal
    const goalBox = new THREE.Box3().setFromObject(goal);
    if (ballBox.intersectsBox(goalBox)) {
      endGame();
    }
  }

  function endGame() {
    gameOver = true;
    document.getElementById("message").style.display = "block";
    document.getElementById("message").innerHTML = `
      ðŸŽ‰ You Win! <br><br>
      <b>Newtonâ€™s First Law (Law of Inertia):</b><br>
      The ball keeps moving in the same direction and speed unless acted on by an external force.<br><br>
      - When you pressed the arrow keys, you applied a <b>force</b> to change its motion.<br>
      - The ball kept rolling because no force stopped it immediately.<br>
      - <b>Friction</b> and <b>collisions with obstacles</b> acted as external forces, slowing it down or changing its direction.<br><br>
      Without these forces, the ball would keep moving forever!
    `;
  }

  function animate() {
    if (!gameOver && gameStarted) {
      requestAnimationFrame(animate);

      handleInput();
      applyFriction();

      ball.position.x += velocityX;
      ball.position.z += velocityZ;

      checkCollisions();
    }

    if (gameStarted) {
      document.getElementById("info").textContent =
        `Velocity: ${Math.sqrt(velocityX**2 + velocityZ**2).toFixed(2)}`;
    }

    renderer.render(scene, camera);
  }

  function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  }
</script>
</body>
</html>
